AWSTemplateFormatVersion: 2010-09-09

Parameters:
    
  identityPoolName:
    Type: String
              
  allowUnauthenticatedIdentities:
    Type: String
            
  thirdPartyAuth:
    Type: String
          
  lambdaLogPolicy:
    Type: String
            
  openIdLambdaRoleName:
    Type: String
            
  openIdRolePolicy:
    Type: String
            
  openIdLambdaIAMPolicy:
    Type: String
            
  openIdLogPolicy:
    Type: String
            
  userPoolName:
    Type: String
                  
  autoVerifiedAttributes:
    Type: CommaDelimitedList
      
  mfaConfiguration:
    Type: String
                  
  mfaTypes:
    Type: CommaDelimitedList
      
  roleName:
    Type: String
            
  roleExternalId:
    Type: String
            
  policyName:
    Type: String
            
  smsAuthenticationMessage:
    Type: String
            
  smsVerificationMessage:
    Type: String
            
  emailVerificationSubject:
    Type: String
            
  emailVerificationMessage:
    Type: String
              
  defaultPasswordPolicy:
    Type: String
              
  passwordPolicyMinLength:
    Type: Number
              
  passwordPolicyCharacters:
    Type: CommaDelimitedList
            
  requiredAttributes:
    Type: CommaDelimitedList
      
  userpoolClientName:
    Type: String
              
  userpoolClientGenerateSecret:
    Type: String
              
  userpoolClientRefreshTokenValidity:
    Type: Number
              
  userpoolClientReadAttributes:
    Type: CommaDelimitedList
      
  mfaLambdaRole:
    Type: String
            
  mfaLambdaLogPolicy:
    Type: String
            
  mfaPassRolePolicy:
    Type: String
            
  mfaLambdaIAMPolicy:
    Type: String
            
  userpoolClientLambdaRole:
    Type: String
            
  userpoolClientLogPolicy:
    Type: String
            
  userpoolClientLambdaPolicy:
    Type: String
              
  userpoolClientSetAttributes:
    Type: String
          
  resourceName:
    Type: String
            
  authSelections:
    Type: String
            
  useDefault:
    Type: String
            
  unAuthRoleName:
    Type: String
            
  authRoleName:
    Type: String
            
  unAuthRoleArn:
    Type: String
            
  authRoleArn:
    Type: String
                  
  authProviders:
    Type: CommaDelimitedList
      
  facebookAppId:
    Type: String
            
  googleClientId:
    Type: String
            
  googleIos:
    Type: String
            
  selectedParties:
    Type: String
                  
  audiences:
    Type: CommaDelimitedList
    
Resources:
  
  # BEGIN SNS ROLE RESOURCE
  SNSRole: 
  # Created to allow the UserPool SMS Config to publish via the Simple Notification Service during MFA Process
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref roleName
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Sid: ""
            Effect: "Allow"
            Principal: 
              Service: "cognito-idp.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
            Condition: 
              StringEquals:
                sts:ExternalId: !Ref roleExternalId
      Policies: 
        - 
          PolicyName: !Ref policyName
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - "sns:Publish"
                Resource: "*"
  # BEGIN USER POOL RESOURCES
  UserPool:
  # Created upon user selection
  # Depends on SNS Role for Arn if MFA is enabled
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref userPoolName
      Schema: 
        
        -
          Name: email
          Required: true
          Mutable: true
        
      
      AutoVerifiedAttributes: !Ref autoVerifiedAttributes
      
      
      EmailVerificationMessage: !Ref emailVerificationMessage
      EmailVerificationSubject: !Ref emailVerificationSubject
            
      Policies:
        PasswordPolicy:
          MinimumLength: !Ref passwordPolicyMinLength
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      MfaConfiguration: !Ref mfaConfiguration
      SmsVerificationMessage: !Ref smsVerificationMessage
      SmsConfiguration: 
        SnsCallerArn: !GetAtt SNSRole.Arn
        ExternalId: !Ref roleExternalId 
    
  UserPoolClientWeb:
  # Created provide application access to user pool
  # Depends on UserPool for ID reference
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: cognito7ce9ddf3_app_clientWeb
      
      RefreshTokenValidity: !Ref userpoolClientRefreshTokenValidity
      UserPoolId: !Ref UserPool
    DependsOn: UserPool
  UserPoolClient:
  # Created provide application access to user pool
  # Depends on UserPool for ID reference
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Ref userpoolClientName
      
      GenerateSecret: !Ref userpoolClientGenerateSecret
      RefreshTokenValidity: !Ref userpoolClientRefreshTokenValidity
      UserPoolId: !Ref UserPool
    DependsOn: UserPool
  # BEGIN USER POOL LAMBDA RESOURCES
  UserPoolClientRole:
  # Created to execute Lambda which gets userpool app client config values
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref userpoolClientLambdaRole     
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
    DependsOn: UserPoolClient
  UserPoolClientLambda:
  # Lambda which gets userpool app client config values
  # Depends on UserPool for id
  # Depends on UserPoolClientRole for role ARN
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Join 
          - |+
          - - 'const response = require(''cfn-response'');'
            - 'const aws = require(''aws-sdk'');'
            - 'const identity = new aws.CognitoIdentityServiceProvider();'
            - 'exports.handler = (event, context, callback) => {'
            - ' if (event.RequestType == ''Delete'') { '
            - '   response.send(event, context, response.SUCCESS, {})'
            - ' }'
            - ' if (event.RequestType == ''Update'' || event.RequestType == ''Create'') {'
            - '   const params = {'
            - '     ClientId: event.ResourceProperties.clientId,'
            - '     UserPoolId: event.ResourceProperties.userpoolId'
            - '   };'
            - '   identity.describeUserPoolClient(params).promise()'
            - '     .then((res) => {'
            - '       response.send(event, context, response.SUCCESS, {''appSecret'': res.UserPoolClient.ClientSecret});'   
            - '     })'
            - '     .catch((err) => {'
            - '       response.send(event, context, response.FAILURE, {err});'
            - '     });'
            - ' }'
            - '};'
      Handler: index.handler
      Runtime: nodejs6.10
      Timeout: '300'
      Role: !GetAtt 
        - UserPoolClientRole
        - Arn
    DependsOn: UserPoolClientRole
  UserPoolClientLambdaPolicy:
  # Sets userpool policy for the role that executes the Userpool Client Lambda
  # Depends on UserPool for Arn
  # Marked as depending on UserPoolClientRole for easier to understand CFN sequencing
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Ref userpoolClientLambdaPolicy
      Roles: 
        - !Ref userpoolClientLambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'cognito-idp:DescribeUserPoolClient'
            Resource: !GetAtt UserPool.Arn
    DependsOn: UserPoolClientLambda
  UserPoolClientLogPolicy:
  # Sets log policy for the role that executes the Userpool Client Lambda
  # Depends on UserPool for Arn
  # Marked as depending on UserPoolClientLambdaPolicy for easier to understand CFN sequencing
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Ref userpoolClientLogPolicy
      Roles: 
        - !Ref userpoolClientLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub  
              - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
              - { region: !Ref "AWS::Region",  account: !Ref "AWS::AccountId", lambda: !Ref UserPoolClientLambda}
    DependsOn: UserPoolClientLambdaPolicy  
  UserPoolClientInputs:
  # Values passed to Userpool client Lambda
  # Depends on UserPool for Id
  # Depends on UserPoolClient for Id
  # Marked as depending on UserPoolClientLambdaPolicy for easier to understand CFN sequencing
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt UserPoolClientLambda.Arn
      clientId: !Ref UserPoolClient
      userpoolId: !Ref UserPool
    DependsOn: UserPoolClientLogPolicy
  
    
  # BEGIN IDENTITY POOL RESOURCES
  
  OpenIdLambdaRole:
  # Created to execute Lambda which sets MFA config values
  # Depends on UserPoolClientInputs to prevent further identity pool resources from being created before userpool is ready
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref openIdLambdaRoleName     
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
      - PolicyName: !Ref openIdRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 'iam:PassRole'
              Resource: arn:aws:iam:::role/cognito7ce9ddf3_openid_lambda_role
    DependsOn: UserPoolClientInputs
  OpenIdLambda:
  # Lambda which sets OpenId Values
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Join 
          - |+
          - - 'const response = require(''cfn-response'');'
            - 'const aws = require(''aws-sdk'');'
            - 'const iam = new aws.IAM();'
            - 'exports.handler = (event, context) => {'
            - ' if (event.RequestType == ''Delete'') { '
            - '   response.send(event, context, response.SUCCESS, {});'
            - ' }'
            - ' if (event.RequestType == ''Update'' || event.RequestType == ''Create'') {'
            - '   const params = {'
            - '     ClientIDList: event.ResourceProperties.clientIdList.split('',''),'
            - '     ThumbprintList: ["0000000000000000000000000000000000000000"],'   
            - '     Url: event.ResourceProperties.url'
            - '   };'
            - '   let exists = false;'
            - '   let existingValue;'
            - '   iam.listOpenIDConnectProviders({}).promise().then((data) => {'
            - '     if (data.OpenIDConnectProviderList && data.OpenIDConnectProviderList.length > 0) {'
            - '       const vals = data.OpenIDConnectProviderList.map(x => x.Arn);'
            - '       existingValue = vals.find(i => i.split(''/'')[1] === params.Url.split(''//'')[1]);'
            - '       if (!existingValue) {'
            - '         exists = true;'
            - '       }'
            - '     }'
            - '     if (!existingValue) {'
            - '       iam.createOpenIDConnectProvider(params).promise().then((data) => {'
            - '         response.send(event, context, response.SUCCESS, {providerArn: data.OpenIDConnectProviderArn, providerIds: params.ClientIDList});'   
            - '       })'
            - '       .catch((err) => {'
            - '         response.send(event, context, response.FAILURE, {err});'
            - '       });'
            - '     } else {'
            - '       const findParams = {'
            - '         OpenIDConnectProviderArn: existingValue'
            - '       };'
            - '       iam.getOpenIDConnectProvider(findParams).promise().then((data) => {'
            - '         const audiences = data.ClientIDList;'
            - '         const updateCalls = [];'
            - '         params.ClientIDList.forEach((a) => {'
            - '           if (!audiences.includes(a)) {'
            - '             const updateParams = {'
            - '               ClientID: a,'
            - '               OpenIDConnectProviderArn: existingValue'
            - '             };'
            - '             const prom = iam.addClientIDToOpenIDConnectProvider(updateParams).promise();'
            - '             updateCalls.push(prom);'
            - '           }'
            - '         });'
            - '         Promise.all(updateCalls).then(function(values) {'
            - '           response.send(event, context, response.SUCCESS, {providerArn: existingValue, providerIds: params.ClientIDList});'   
            - '         })'
            - '         .catch((err3) => {'
            - '           response.send(event, context, response.FAILURE, {err3});'
            - '         });'
            - '       })'
            - '       .catch((err2) => {'
            - '           response.send(event, context, response.FAILURE, {err2});'
            - '       });'
            - '     }'
            - '   })'
            - '   .catch((err1) => {'
            - '           response.send(event, context, response.FAILURE, {err1});'
            - '   });'
            - ' }'
            - '};'
      Handler: index.handler
      Runtime: nodejs6.10
      Timeout: '300'
      Role: !GetAtt 
        - OpenIdLambdaRole
        - Arn
    DependsOn: OpenIdLambdaRole
  OpenIdLambdaIAMPolicy:
  # Sets policy for the role that executes the OpenId Lambda
  # Depends on OpenIdLambda for Arn
  # Marked as depending on MFALambda for easier to understand CFN sequencing
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Ref openIdLambdaIAMPolicy
      Roles: 
        - !Ref openIdLambdaRoleName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'iam:CreateOpenIDConnectProvider'
              - 'iam:GetOpenIDConnectProvider'
              - 'iam:AddClientIDToOpenIDConnectProvider'
            Resource: !Sub  
              - arn:aws:iam::${account}:oidc-provider/accounts.google.com
              - { account: !Ref "AWS::AccountId"}
          - Effect: Allow
            Action:
              - 'iam:ListOpenIDConnectProviders'
            Resource: !Sub  
              - arn:aws:iam::${account}:oidc-provider/${selector}
              - { account: !Ref "AWS::AccountId", selector: '*'}
    DependsOn: OpenIdLambda
  OpenIdLogPolicy:
  # Sets log policy for the role that executes the OpenId  Lambda
  # Depends on OpenIdLambda for Arn
  # Marked as depending on UserPoolClientLambdaPolicy for easier to understand CFN sequencing
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Ref openIdLogPolicy
      Roles: 
        - !Ref openIdLambdaRoleName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub  
              - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
              - { region: !Ref "AWS::Region",  account: !Ref "AWS::AccountId", lambda: !Ref OpenIdLambda}
    DependsOn: OpenIdLambdaIAMPolicy  
  OpenIdLambdaInputs:
  # Values passed to OpenId Lambda
  # Depends on OpenId for Arn
  # Marked as depending on OpenIdLogPolicy for easier to understand CFN sequencing
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt OpenIdLambda.Arn
      clientIdList: 150047712847-9srd74opv7na5jsfn7tnf765kc963ekj.apps.googleusercontent.com,150047712847-q996v2ejn1d3lmaf1qu7n3j7k2akb7p1.apps.googleusercontent.com
      url: 'https://accounts.google.com'
    DependsOn: OpenIdLogPolicy
  
  
  IdentityPool:
  # Always created
    Type: AWS::Cognito::IdentityPool
    Properties: 
      IdentityPoolName: cognito7ce9ddf3_identitypool_7ce9ddf3
      
      CognitoIdentityProviders:
        - ClientId:  !Ref UserPoolClient
          ProviderName: !Sub
            - cognito-idp.${region}.amazonaws.com/${client}
            - { region: !Ref "AWS::Region",  client: !Ref UserPool}
        - ClientId:  !Ref UserPoolClientWeb
          ProviderName: !Sub
            - cognito-idp.${region}.amazonaws.com/${client}
            - { region: !Ref "AWS::Region",  client: !Ref UserPool}
            
      SupportedLoginProviders: 
        
          
          graph.facebook.com: '227193818161885'
                   
      
      AllowUnauthenticatedIdentities: !Ref allowUnauthenticatedIdentities
      
      OpenIdConnectProviderARNs:
        - !GetAtt OpenIdLambdaInputs.providerArn
    DependsOn: OpenIdLambdaInputs
       
    
  
  IdentityPoolRoleMap:
  # Created to map Auth and Unauth roles to the identity pool
  # Depends on Identity Pool for ID ref
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties: 
      IdentityPoolId: !Ref IdentityPool
      Roles:
          unauthenticated: !Ref unAuthRoleArn
          authenticated: !Ref authRoleArn
    DependsOn: IdentityPool
  

Outputs :
  
  IdentityPoolId:
    Value: !Ref 'IdentityPool'
    Description:  Id for the identity pool
  IdentityPoolName:
    Value: !GetAtt IdentityPool.Name 
  
  
  UserPoolId:
    Value: !Ref 'UserPool'
    Description:  Id for the user pool
  UserPoolName:
    Value: !Ref userPoolName
  AppClientIDWeb:
    Value: !Ref 'UserPoolClientWeb'
    Description: The user pool app client id for web
  AppClientID:
    Value: !Ref 'UserPoolClient'
    Description: The user pool app client id
  AppClientSecret:
    Value: !GetAtt UserPoolClientInputs.appSecret
  
  
  GoogleWebClient:
    Value: 150047712847-9srd74opv7na5jsfn7tnf765kc963ekj.apps.googleusercontent.com
   
  
  GoogleIOSClient:
    Value: 150047712847-q996v2ejn1d3lmaf1qu7n3j7k2akb7p1.apps.googleusercontent.com
   
  
  
  FacebookWebClient:
    Value: 227193818161885
   
  