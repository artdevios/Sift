//
//  SignupPresenter.swift
//  Sift
//
//  Created Денис Фролов on 25/01/2019.
//  Copyright © 2019 Denis Frolov. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import AWSMobileClient

class SignupPresenter {

    weak private var view: SignupViewProtocol!
    var interactor: SignupInteractorInputProtocol!
    private let router: SignupWireframeProtocol
    
    let items: [SignUpCellModel] = [SignUpCellModel(type: .fullName),
                                    SignUpCellModel(type: .email),
                                    SignUpCellModel(type: .phoneNumber),
                                    SignUpCellModel(type: .password)]

    init(interface: SignupViewProtocol, interactor: SignupInteractorInputProtocol?, router: SignupWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    
    // Private
    
    // MARK: - Amazon
    
    func signUp() {
        
        guard let username = items.filter({$0.type == .fullName}).first?.value else {
            router.showErrorAlert(msg: "Full Name Incorrect")
            return
        }
        
        guard let email = items.filter({$0.type == .email}).first?.value else {
            router.showErrorAlert(msg: "Email Incorrect")
            return
        }
        
        guard let phoneNumber = items.filter({$0.type == .phoneNumber}).first?.value else {
            router.showErrorAlert(msg: "Phone Number Incorrect")
            return
        }
        
        guard let password = items.filter({$0.type == .password}).first?.value else {
            router.showErrorAlert(msg: "Password Incorrect")
            return
        }
        
        AWSMobileClient.sharedInstance().signUp(username: username,
                                                password: password,
                                                userAttributes: ["email":email, "phone_number": phoneNumber]) { (signUpResult, error) in
                                                    if let signUpResult = signUpResult {
                                                        switch(signUpResult.signUpConfirmationState) {
                                                        case .confirmed:
                                                            print("User is signed up and confirmed.")
                                                            DispatchQueue.main.async {
                                                                TestViewController.presentBaseTestViewController()
                                                            }
                                                        case .unconfirmed:
                                                            DispatchQueue.main.async {
                                                                self.showConfirmAlert(msg: "User is not confirmed and needs verification via \(signUpResult.codeDeliveryDetails!.deliveryMedium) sent at \(signUpResult.codeDeliveryDetails!.destination!)")
                                                            }
                                                        case .unknown:
                                                            print("Unexpected case")
                                                        }
                                                    } else if let error = error {
                                                        if let error = error as? AWSMobileClientError {
                                                            switch(error) {
                                                            case .usernameExists(let message):
                                                                print(message)
                                                            default:
                                                                break
                                                            }
                                                        }
                                                        DispatchQueue.main.async {
                                                           self.router.showErrorAlert(msg: error.localizedDescription)
                                                        }
                                                    }
        }
    }
    
    private func confirmSignUp(code: String) {
        
        guard let username = items.filter({$0.type == .fullName}).first?.value else {
            router.showErrorAlert(msg: "Full Name Incorrect")
            return
        }
        
        AWSMobileClient.sharedInstance().confirmSignUp(username: username, confirmationCode: code) { (signUpResult, error) in
            if let signUpResult = signUpResult {
                switch(signUpResult.signUpConfirmationState) {
                case .confirmed:
                    DispatchQueue.main.async {
                        TestViewController.presentBaseTestViewController()
                    }
                case .unconfirmed:
                    DispatchQueue.main.async {
                        self.router.showAlert(title: nil, msg: "User is not confirmed and needs verification via \(signUpResult.codeDeliveryDetails!.deliveryMedium) sent at \(signUpResult.codeDeliveryDetails!.destination!)")
                    }
                case .unknown:
                    print("Unexpected case")
                }
            } else if let error = error {
                DispatchQueue.main.async {
                    self.router.showErrorAlert(msg: error.localizedDescription)
                }
            }
        }
    }
    
    private func showConfirmAlert(msg: String) {
        let alert = UIAlertController(title: nil, message: msg, preferredStyle: .alert)
        alert.addTextField { (textField) in
            textField.placeholder = "Code"
            textField.keyboardType = .numberPad
        }
        alert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: nil))
        alert.addAction(UIAlertAction(title: "Confirm", style: .default, handler: { (action) in
            guard let codeTextField = alert.textFields?.first else { return }
            self.confirmSignUp(code: codeTextField.text ?? "")
        }))
        (self.view as! UIViewController).present(alert, animated: true, completion: nil)
    }

}

// MARK: - SignupPresenterProtocol

extension SignupPresenter: SignupPresenterProtocol {
    
    // Table View
    
    var cellCount: Int {
        return items.count
    }
    
    var cellHeight: CGFloat {
        return 63.0
    }
    
    func dataForIndexPath(_ indexPath: IndexPath) -> SignUpCellModel? {
        return items[indexPath.row]
    }
    
    // Actions
    
    func signUpAction() {
        signUp()
    }
    
    
    
}

// MARK: - SignupInteractorOutputProtocol

extension SignupPresenter: SignupInteractorOutputProtocol {
    
}
